#include <iostream>

using namespace std;

template<class td>
class coada
{
private:
    td *num;
    int lung;
    int last;
    int first;
    int elem;
public:
    coada(int size=5);
    ~coada();
    void destroy();
    void add(td x);
    void see();
    int size();
    bool isEmpty();
    bool isFull();

};

template<class td> coada<td>::coada(int size)
{
    num=new td(size);
    lung=size;
    first=0;
    last=-1;
    elem=0;
}

template<class td> coada<td>::~coada()
{
    delete num;
}

template<class td>coada<td>::destroy()
{
    if(!isEmpty())
    {first=(first+1)%lung;
      td ei=num[0];
      num[size()-1]= temp;
      elem--;


        return true;
    }
    else
    {
        cout<<"\nEmpty list";
        return false;
    }

}


template<class td>coada<td>::add()
{
    if(!isFull())
    {
        num[(first+elem)%lung]=x;
        elem++;
        return true;
    }
    else
    {
        cout<<"\nFull list";
        return false;
    }
}


template<class td> coada<td>::see()
{
    for(int i=0; i<elem; i++)
    {

        if(i)
            cout<<", ";
        cout<<num[(first+i)%lung];
    }
}


template<class td> coada<td>::isEmpty()
{
    return(size()==0);
}

template<class td> coada<td>::isFull()
{
    return(size()==lung);
}








int main()
{
    coada<int> s(3);

   s.add(1);
    s.add(2);
     s.add(3);
     s.see();

    return 0;
}
